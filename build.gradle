plugins {
    id("java")
    id("groovy")
    id("org.jetbrains.kotlin.jvm") version "${kotlinVersion}"
    id("org.springframework.boot") version("${springBootVersion}")
    id("io.spring.dependency-management") version("${springDepedencyVersion}")
}

group = "org.featx.sta2ry.mall"
version = "0.0.1-SNAPSHOT"

repositories {
    mavenCentral()
    maven {
        url = uri("https://oss.sonatype.org/content/repositories/snapshots")
        mavenContent {snapshotsOnly()}
    }
    maven {
        url = uri("https://packages.aliyun.com/maven/repository/2010689-release-56y7uo")
        credentials {
            username = "${MVN_USERNAME}"
            password = "${MVN_PASSWORD}"
        }
    }
    maven {
        url = uri("https://packages.aliyun.com/maven/repository/2010689-snapshot-bcJ57J/")
        credentials {
            username = "${MVN_USERNAME}"
            password = "${MVN_PASSWORD}"
        }
    }
}

dependencyManagement {
    imports {
        mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
        mavenBom("com.alibaba.cloud:spring-cloud-alibaba-dependencies:${springCloudAlibabaVersion}")
    }
}

configurations {
//    compile.exclude group: "org.springframework.cloud", module: "spring-cloud-starter-netflix-ribbon"
    //Used undertow instead of tomcat
    implementation.exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
    implementation.exclude group: "org.apache.tomcat"
    implementation.exclude group: "org.apache.tomcat.embed"
    implementation.exclude group: "org.apache.tomcat", module: "tomcat-jdbc"
}

dependencies {
    implementation("org.featx.sta2ry.lyrae:lyrae-spec:1.0.0-SNAPSHOT")

    implementation("com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery")
    implementation("com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-config")
    implementation("com.alibaba.cloud:spring-cloud-starter-alibaba-sentinel")

    implementation("org.springframework.cloud:spring-cloud-starter-bootstrap")
    implementation("org.springframework.cloud:spring-cloud-starter-openfeign")
    implementation("org.springframework.cloud:spring-cloud-starter-loadbalancer")

    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-web")
//    implementation("org.springframework.boot:spring-boot-starter-webflux")
    implementation("org.springframework.boot:spring-boot-starter-undertow")

    implementation("com.alibaba.csp:sentinel-datasource-nacos")
    implementation("com.squareup.okhttp3:okhttp:${okHttpVersion}")
    implementation("com.google.guava:guava:${guavaVersion}")
    implementation("org.codehaus.groovy:groovy:${groovyVersion}")
    implementation("org.featx.spec:spec:${featxSpecVersion}")

    compileOnly("org.projectlombok:lombok")
    annotationProcessor("org.projectlombok:lombok")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    sourceCompatibility = "${javaVersion}"
    targetCompatibility = "${javaVersion}"
}

tasks.withType(GroovyCompile) {
    options.encoding = "UTF-8"
    sourceCompatibility = JavaVersion.VERSION_15
    targetCompatibility = JavaVersion.VERSION_15
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
    kotlinOptions.jvmTarget = "${javaVersion}"
}

tasks.withType(Test) {
    useJUnitPlatform()
    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
    }
}